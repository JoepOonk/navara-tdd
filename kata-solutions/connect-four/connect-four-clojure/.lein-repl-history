(defn free-row-for
  [column in-game]
    (count (Integer/toBinaryString (bit-and 127 (bit-shift-left (in-game 0) column))))
  )
(free-row-for 0 [3 1 2])
(free-row-for 0 [7 5 2])
(free-row-for 0 [0 0 0])
exit
(Integer/toBinaryString 896)
(Integer/toBinaryString (bit-shift-right 7 896))
exit
(Integer/toBinaryString (bit-shift-right 7 896))
(Integer/toBinaryString (bit-and 127 (bit-shift-right 7 896)))
(Integer/toBinaryString (bit-and 127 (bit-shift-right 7 (+ 65535 896)))))
(Integer/toBinaryString (bit-and 127 (bit-shift-right 7 (+ 65535 896))))
(Integer/toBinaryString (bit-shift-right 7 (+ 65535 896)))
(Integer/toBinaryString (bit-shift-right 7 896))
(Integer/toBinaryString (bit-shift-right 7 65536))
(Integer/toBinaryString (bit-shift-right 7 65535))
(Integer/toBinaryString (bit-shift-right 7 65536))
(Integer/toBinaryString 65535)
(Integer/toBinaryString (bit-shift-right 1 65535))
(Integer/toBinaryString (bit-shift-left 1 65535))
(Integer/toBinaryString (bit-shift-right 65535 1)))
(Integer/toBinaryString (bit-shift-right 65535 1))
(Integer/toBinaryString (bit-shift-right 65535 2))
(Integer/toBinaryString (bit-shift-right (+ 65535 896) 7))
(Integer/toBinaryString (bit-and 127 (bit-shift-right (+ 65535 896) 7)))
exit
(defn aap [num] (Integer/toBinaryString (bit-and 127 (bit-shift-right num 7))))
(aap 1)
(aap 7)
(aap 896)
(aap 17270)
(Integer/toBinaryString 17270)
(Integer/toBinaryString 17280)
(Integer/toBinaryString (bit-shift-right 17280 7))
(Integer/toBinaryString (bit-shift-right 17280 14))
(Integer/toBinaryString (bit-shift-right 17280 7))
(Integer/toBinaryString (bit-and (bit-shift-right 17280  1277))
(Integer/toBinaryString (bit-shift-right 17280 7))
(bit-and 896 127) 
(bit-and 127 896)
(bit-and 3 127)
(bit-and 4 127)
(bit-and 127 127)
(bit-and 128 127)
(bit-and 129 127)
(bit-and 130 127)
exit
(Integer/toBinaryString (bit-shift-right 17280 7))
(Integer/toBinaryString (bit-and (bit-shift-right 17280 7) 127)
(Integer/toBinaryString (bit-and (bit-shift-right 17280 7) 127))
(Integer/toBinaryString (bit-shift-right 17280 7))
exit
(defn free-row-for
  [column in-game]
    (let [board (in-game 0)
          selected-column (bit-shift-right board (* column 7))
          selected-column-only (bit-and selected-column 127)
          column-as-string (Integer/toBinaryString selected-column-only)]
    (if (= "0" column-as-string)
      0
      (count column-as-string))))
(free-row-for 0 [63 63 0])
(frequencies "111")
(frequencies "0")
(get 0 (frequencies "0"))
(get (frequencies "000111")) 0
(get (frequencies "000111") 0)
(get (frequencies "000111") 1)
(get (frequencies "000111") \1)
(get (frequencies "000111") \0)
(get (frequencies "0") \1)
(get (frequencies "0") \1)exit
exit
(not 1)
(not 0)
(bit-xor 1 1)
(bit-xor 1 0)
exit
